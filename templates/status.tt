[%#

Copyright (c) 2003-2010, Andrew Dunstan

See accompanying License file for license details

-%]
[%
 flag_imgs = {
     perl => 1,
     python => 1,
     debug => 1, 
     pam => 1,
     cassert => 1,
     openssl => 1,
     nls => 1,
     krb5 => 1,
     gssapi => 1,
     tcl => 1,
     vpath => 1,
     xml => 1,
	 llvm => 1,
	 'tap-tests' => 1,
     'thread-safety' => 1,
     }
-%]
[%- BLOCK flag ; IF flag_imgs.${flag} == 1 %]<span class="[% flag %]" title="[% flag %]"></span>[% END ; END -%]
[%- BLOCK sysnotes ; IF row.sys_notes %]<td class="notes"><span class="snotes" title="[% row.sys_notes_ts.replace(' .*','') | html %]: [% row.sys_notes | html %]"></span></td>
[%- ELSE %]<td>&nbsp;</td>[% END ; END -%]
[%- BLOCK cl %] class="[% IF bgfor.match('Git|port-check') %]cerr[% ELSE; SWITCH bgfor.replace('-.*','') -%]
  [%- CASE 'OK' %]pass[% CASE 'ContribCheck' %]warn[% CASE [ 'Check' 'InstallCheck' ] %]warnx[% CASE [ 'pgsql' 'pgsql-Git-Dirty' 'Pre-run-port-check' ] %]cerr[% CASE %]fail[% END ; END %]"
[%- END -%]
[% WRAPPER 'page.tt' 
	title = 'PostgreSQL BuildFarm Status'
	bodyclass = 'none'
	pagebutton = 'status'
%]
<!-- lastmodhead: [% lastmodhead %] -->
    <h1>PostgreSQL BuildFarm Status</h1>
    <p>
      Shown here is the latest status of each farm member 
      for each branch it has reported on in the last 30 days.
    </p>
    <p>
       Use the farm member link for history of that member 
       on the relevant branch.
    </p>
<table><tr><th class="head" rowspan="2">Legend</th>
[% FOREACH flagset IN flag_imgs %]
<td class="legend"><span class="[% flagset.key %]" title="[% flagset.key %]"></span> =  [% flagset.key %]</td>
[% IF loop.count == 7 %]</tr><tr>[% END %]
[% END %]
</tr></table>
<br />
    <table cellspacing="0">
[% brch = "" %]
[% FOREACH row IN statrows %]
[% IF row.branch != brch ; brch = row.branch %]
<tr><th class="head" colspan="5">Branch: [% brch %]</th></tr>
<tr><th colspan="2">Alias</th><th>System</th><th>Status</th><th>Flags</th></tr>
[% END %]
<tr [% PROCESS cl bgfor=row.stage %]>
    <td><a 
    href="show_history.pl?nm=[% row.sysname %]&amp;br=[% row.branch %]"
    title="History"
    >[% row.sysname %]</a></td>
    [% PROCESS sysnotes %]
    <td><span class="opsys">[% row.operating_system %]
            [% row.os_version %]</span> <span class="compiler">
            [%- row.compiler %]
            [% row.compiler_version %]</span> <span class="arch">
            [%- row.architecture %]</span></td>
    <td class="status">
            <span title="[%- row.snapshot %] UTC" class="whenago">[%- row.snapshot %]</span>&nbsp;
            [% row.stage -%]
	    [[% row.git_head_ref.substr(0,7) %]]
            <a href="show_log.pl?nm=
               [%- row.sysname %]&amp;dt=
               [%- row.snapshot | uri %]">
                [%- IF row.stage != 'OK' %]Details[% ELSE %]Config[% END -%]</a></td>

    <td class="flags">[% FOREACH flag IN row.build_flags.split().sort() ; PROCESS flag ; END %]</td>
</tr>
[% END %]
    </table>
<script language="javascript">
function whenago (agodt) {
    agodt = agodt.replace(' ','T') + 'Z';
	var dt = new Date(agodt);
	var diffsecs = Math.floor((new Date() - dt) / 1000);
	var days = Math.floor(diffsecs / 86400);
	var result = '';
	if (days == 1) { result = '1&nbsp;day&nbsp;'; }
	else if (days > 0) { result = '' + days + '&nbsp;days&nbsp;'; }
	diffsecs -= days * 86400;
	var hours = Math.floor(diffsecs / 3600);
    diffsecs -= hours * 3600;
	var mins = Math.floor(diffsecs / 60);
	var secs =  diffsecs - (mins * 60);
	if (hours < 10) { result = result + '0'; }
	result = result + hours + ':';
	if (mins < 10) { result = result + '0'; }
//	result = result + mins + ':';
//	if (secs < 10) { result = result + '0'; }
//	result = result + secs + '&nbsp;ago';
    result = result + mins + '&nbsp;ago'; // who cares about seconds anyway?
	return result;
}

function set_ago () {
    var agospans = document.getElementsByClassName("whenago");
    var agolen = agospans.length;
    for ( i = 0 ; i < agolen; i++) {
        var ago = agospans[i];
	    ago.innerHTML = whenago(ago.getAttribute('title').replace(' UTC',''));
    }
}

set_ago();
var ago_timer = setInterval(set_ago, 60*1000); // refresh ago text every 60s

// if we ever want to clear it we can call:
//    clearInterval(ago_timer);
// if we do we should probably use the title text in place of the
// previous ago text

</script>
[% END %]
